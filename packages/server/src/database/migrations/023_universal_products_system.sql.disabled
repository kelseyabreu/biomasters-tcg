-- Universal Products System Migration
-- Implements the complete product system for BioMasters TCG
-- Supports decks, booster packs, single cards, bundles, merchandise, digital content, subscriptions

-- ============================================================================
-- CORE PRODUCTS TABLES
-- ============================================================================

-- Universal products table (handles all product types)
CREATE TABLE IF NOT EXISTS products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    product_type INTEGER NOT NULL CHECK (product_type IN (1,2,3,4,5,6,7)), -- ProductType enum
    
    -- Pricing
    price_physical DECIMAL(10,2),
    price_virtual DECIMAL(10,2),
    
    -- Product configuration (JSONB handles any product type)
    product_config JSONB NOT NULL DEFAULT '{}',
    
    -- Metadata
    set_code VARCHAR(10),
    is_default_starter BOOLEAN DEFAULT FALSE,
    is_purchasable BOOLEAN DEFAULT TRUE,
    is_public BOOLEAN DEFAULT FALSE, -- For publicly visible/claimable decks
    release_date DATE,
    conservation_status INTEGER, -- ConservationStatus enum (for single cards only)
    
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Universal product contents table
CREATE TABLE IF NOT EXISTS product_contents (
    product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    content_type INTEGER NOT NULL CHECK (content_type IN (1,2,3,4,5,6)), -- ProductContentType enum
    
    -- Card-related content
    card_id INTEGER REFERENCES cards(id), -- Your existing CardId system
    quantity INTEGER DEFAULT 1,
    
    -- Deck-related content  
    deck_type INTEGER, -- DeckType enum for prebuilt decks
    
    -- Rarity pools for boosters (using IUCN system)
    conservation_status INTEGER, -- ConservationStatus enum
    weight INTEGER, -- IUCN-based probability weight
    
    -- Nested products for bundles
    nested_product_id UUID REFERENCES products(id),
    
    -- Generic content (for merchandise, digital items, etc.)
    content_data JSONB DEFAULT '{}', -- Flexible data for any content type
    
    -- Metadata
    created_at TIMESTAMP DEFAULT NOW(),
    
    PRIMARY KEY (product_id, content_type, COALESCE(card_id, deck_type, conservation_status, nested_product_id, (content_data->>'id')))
);

-- ============================================================================
-- CONSERVATION STATUS DATA (IUCN RARITY SYSTEM)
-- ============================================================================

-- IUCN conservation status data for authentic rarity system
CREATE TABLE IF NOT EXISTS conservation_status_data (
    status_id INTEGER PRIMARY KEY, -- ConservationStatus enum value
    status_code VARCHAR(3) NOT NULL, -- EX, EW, CR, EN, VU, NT, LC, DD
    status_name VARCHAR(50) NOT NULL,
    percentage DECIMAL(5,3) NOT NULL, -- IUCN percentage from IUCN_RARITY_SYSTEM.md
    pack_rarity INTEGER NOT NULL, -- Per 100,000 packs
    color VARCHAR(7) NOT NULL, -- Hex color for UI
    description TEXT NOT NULL,
    educational_facts JSONB DEFAULT '[]',
    action_suggestions JSONB DEFAULT '[]',
    created_at TIMESTAMP DEFAULT NOW()
);

-- ============================================================================
-- ENHANCED EXISTING TABLES
-- ============================================================================

-- Enhance existing cards table with missing fields
ALTER TABLE cards ADD COLUMN IF NOT EXISTS card_number INTEGER UNIQUE; -- 1-1000 for species
ALTER TABLE cards ADD COLUMN IF NOT EXISTS set_code VARCHAR(10);

-- Enhance existing user_cards table with source tracking
ALTER TABLE user_cards ADD COLUMN IF NOT EXISTS source_product_id UUID REFERENCES products(id);

-- Enhance existing user_decks table with product reference and deck type
ALTER TABLE user_decks ADD COLUMN IF NOT EXISTS deck_type INTEGER DEFAULT 1; -- DeckType.CUSTOM
ALTER TABLE user_decks ADD COLUMN IF NOT EXISTS source_product_id UUID REFERENCES products(id);
ALTER TABLE user_decks ADD COLUMN IF NOT EXISTS is_public BOOLEAN DEFAULT FALSE; -- Public visibility
ALTER TABLE user_decks ADD COLUMN IF NOT EXISTS is_claimable BOOLEAN DEFAULT FALSE; -- Can be claimed by others

-- ============================================================================
-- NEW COMPLEMENTARY TABLES
-- ============================================================================

-- Player deck cards table (complementary to existing JSONB system)
CREATE TABLE IF NOT EXISTS player_deck_cards (
    deck_id UUID REFERENCES user_decks(id) ON DELETE CASCADE,
    card_id INTEGER REFERENCES cards(id), -- Your CardId system
    quantity INTEGER DEFAULT 1,
    position INTEGER, -- Card order in deck
    created_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (deck_id, card_id)
);

-- Player inventory for non-card items (merchandise, digital content, subscriptions)
CREATE TABLE IF NOT EXISTS player_inventory (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE, -- Use existing users table
    product_id UUID REFERENCES products(id),
    item_type INTEGER NOT NULL, -- ProductType enum
    item_data JSONB DEFAULT '{}', -- Flexible data (size, color, expiry, etc.)
    quantity INTEGER DEFAULT 1,
    source_type VARCHAR(50) DEFAULT 'purchase', -- AcquisitionMethod (keeping as string for compatibility)
    acquired_at TIMESTAMP DEFAULT NOW(),
    expires_at TIMESTAMP, -- For subscriptions
    
    created_at TIMESTAMP DEFAULT NOW()
);

-- Purchase tracking table
CREATE TABLE IF NOT EXISTS purchases (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id), -- Use existing users table with UserType enum
    product_id UUID REFERENCES products(id),
    quantity INTEGER DEFAULT 1,
    total_amount DECIMAL(10,2),
    payment_method INTEGER NOT NULL, -- PaymentMethod enum
    platform INTEGER NOT NULL, -- Platform enum
    status INTEGER DEFAULT 1 CHECK (status IN (0,1,2)), -- 0=pending, 1=completed, 2=failed
    
    -- Payment details
    stripe_payment_intent_id VARCHAR(255),
    external_transaction_id VARCHAR(255),
    
    created_at TIMESTAMP DEFAULT NOW(),
    completed_at TIMESTAMP
);

-- Enhance existing physical_redemptions table
ALTER TABLE physical_redemptions ADD COLUMN IF NOT EXISTS product_id UUID REFERENCES products(id);

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

CREATE INDEX IF NOT EXISTS idx_products_type ON products(product_type);
CREATE INDEX IF NOT EXISTS idx_products_public ON products(is_public);
CREATE INDEX IF NOT EXISTS idx_products_purchasable ON products(is_purchasable);
CREATE INDEX IF NOT EXISTS idx_products_starter ON products(is_default_starter);

CREATE INDEX IF NOT EXISTS idx_product_contents_product_id ON product_contents(product_id);
CREATE INDEX IF NOT EXISTS idx_product_contents_content_type ON product_contents(content_type);
CREATE INDEX IF NOT EXISTS idx_product_contents_card_id ON product_contents(card_id);

CREATE INDEX IF NOT EXISTS idx_user_decks_deck_type ON user_decks(deck_type);
CREATE INDEX IF NOT EXISTS idx_user_decks_public ON user_decks(is_public);
CREATE INDEX IF NOT EXISTS idx_user_decks_claimable ON user_decks(is_claimable);

CREATE INDEX IF NOT EXISTS idx_player_deck_cards_deck_id ON player_deck_cards(deck_id);
CREATE INDEX IF NOT EXISTS idx_player_deck_cards_card_id ON player_deck_cards(card_id);

CREATE INDEX IF NOT EXISTS idx_player_inventory_user_id ON player_inventory(user_id);
CREATE INDEX IF NOT EXISTS idx_player_inventory_product_id ON player_inventory(product_id);

CREATE INDEX IF NOT EXISTS idx_purchases_user_id ON purchases(user_id);
CREATE INDEX IF NOT EXISTS idx_purchases_product_id ON purchases(product_id);
CREATE INDEX IF NOT EXISTS idx_purchases_status ON purchases(status);

-- ============================================================================
-- INSERT IUCN CONSERVATION DATA
-- ============================================================================

-- Insert IUCN conservation status data from IUCN_RARITY_SYSTEM.md
INSERT INTO conservation_status_data (status_id, status_code, status_name, percentage, pack_rarity, color, description, educational_facts, action_suggestions) VALUES
(1, 'EX', 'Extinct', 0.540, 540, '#000000', 'No known individuals remaining', '[]', '[]'),
(2, 'EW', 'Extinct in Wild', 0.054, 54, '#800080', 'Known only to survive in captivity', '[]', '[]'),
(3, 'CR', 'Critically Endangered', 5.950, 5950, '#FF0000', 'Extremely high risk of extinction', '[]', '[]'),
(4, 'EN', 'Endangered', 10.920, 10920, '#FF8C00', 'Very high risk of extinction', '[]', '[]'),
(5, 'VU', 'Vulnerable', 13.190, 13190, '#FFD700', 'High risk of extinction', '[]', '[]'),
(6, 'NT', 'Near Threatened', 5.730, 5730, '#90EE90', 'Close to qualifying for threatened status', '[]', '[]'),
(7, 'LC', 'Least Concern', 50.510, 50646, '#00FF00', 'Widespread and abundant', '[]', '[]'),
(8, 'DD', 'Data Deficient', 12.970, 12970, '#808080', 'Inadequate information for assessment', '[]', '[]')
ON CONFLICT (status_id) DO NOTHING;
